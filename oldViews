def register(request):
    if request.method == 'POST':
       user_form = UserForm(request.POST)			
       profile_form = UserProfileForm(request.POST)
       if user_form.is_valid() and profile_form.is_valid():
          user = user_form.save(commit=False)
          user.set_password(user.password)
          user.save()
          profile = profile_form.save(commit=False)
          profile.user = user
          if 'picture' in request.FILES:
              profile.picture = request.FILES['picture']
          profile.save()
          return HttpResponseRedirect('/rango/reg_success/')
       else:
          print user_form.errors, profile_form.errors
    else:
       user_form = UserForm()
       profile_form = UserProfileForm
    registered = True
    return render(request, 'rango/register.html', {'user_form': user_form, 'profile_form':profile_form,
												   'registered': registered})

def user_login(request):
    if request.method == 'POST':
        # We use request.POST.get('<variable>') as opposed to request.POST['<variable>'],
        # because the request.POST.get('<variable>') returns None, if the value does not exist,
        # while the request.POST['<variable>'] will raise key error exception
        username = request.POST.get('username')
        password = request.POST.get('password')
        user = authenticate(username=username, password=password)

        # If we have a User object, the details are correct.
        # If None (Python's way of representing the absence of a value), no user
        # with matching credentials was found.
        if user:
            if user.is_active: #check acct not dissabled.
                login(request, user)
                return HttpResponseRedirect('/rango/')
            else:
                return HttpResponse("Your Rango account is disabled.") #dangling..
        else:
            print "Invalid login details: {0}, {1}".format(username, password)
            return HttpResponse("Invalid login details supplied.")     #dangling..

    else:
       return render(request, 'rango/login.html', {})

@login_required
def user_logout(request):
    logout(request)
    return HttpResponseRedirect('/rango/')




